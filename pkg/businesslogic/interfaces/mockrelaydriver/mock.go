// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/3rubasa/shagent/pkg/businesslogic/interfaces (interfaces: RelayDriver)

// Package mockrelaydriver is a generated GoMock package.
package mockrelaydriver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRelayDriver is a mock of RelayDriver interface.
type MockRelayDriver struct {
	ctrl     *gomock.Controller
	recorder *MockRelayDriverMockRecorder
}

// MockRelayDriverMockRecorder is the mock recorder for MockRelayDriver.
type MockRelayDriverMockRecorder struct {
	mock *MockRelayDriver
}

// NewMockRelayDriver creates a new mock instance.
func NewMockRelayDriver(ctrl *gomock.Controller) *MockRelayDriver {
	mock := &MockRelayDriver{ctrl: ctrl}
	mock.recorder = &MockRelayDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayDriver) EXPECT() *MockRelayDriverMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockRelayDriver) GetState() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockRelayDriverMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockRelayDriver)(nil).GetState))
}

// Start mocks base method.
func (m *MockRelayDriver) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockRelayDriverMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRelayDriver)(nil).Start))
}

// Stop mocks base method.
func (m *MockRelayDriver) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockRelayDriverMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRelayDriver)(nil).Stop))
}

// TurnOff mocks base method.
func (m *MockRelayDriver) TurnOff() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TurnOff")
	ret0, _ := ret[0].(error)
	return ret0
}

// TurnOff indicates an expected call of TurnOff.
func (mr *MockRelayDriverMockRecorder) TurnOff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnOff", reflect.TypeOf((*MockRelayDriver)(nil).TurnOff))
}

// TurnOn mocks base method.
func (m *MockRelayDriver) TurnOn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TurnOn")
	ret0, _ := ret[0].(error)
	return ret0
}

// TurnOn indicates an expected call of TurnOn.
func (mr *MockRelayDriverMockRecorder) TurnOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnOn", reflect.TypeOf((*MockRelayDriver)(nil).TurnOn))
}
