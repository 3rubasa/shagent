// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/3rubasa/shagent/businesslogic/interfaces (interfaces: TempSensorDriver)

// Package mocktempsenordriver is a generated GoMock package.
package mocktempsenordriver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTempSensorDriver is a mock of TempSensorDriver interface.
type MockTempSensorDriver struct {
	ctrl     *gomock.Controller
	recorder *MockTempSensorDriverMockRecorder
}

// MockTempSensorDriverMockRecorder is the mock recorder for MockTempSensorDriver.
type MockTempSensorDriverMockRecorder struct {
	mock *MockTempSensorDriver
}

// NewMockTempSensorDriver creates a new mock instance.
func NewMockTempSensorDriver(ctrl *gomock.Controller) *MockTempSensorDriver {
	mock := &MockTempSensorDriver{ctrl: ctrl}
	mock.recorder = &MockTempSensorDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTempSensorDriver) EXPECT() *MockTempSensorDriverMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTempSensorDriver) Get() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTempSensorDriverMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTempSensorDriver)(nil).Get))
}

// Initialize mocks base method.
func (m *MockTempSensorDriver) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockTempSensorDriverMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockTempSensorDriver)(nil).Initialize))
}
