// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpcapi/grpcapi.proto

package grpcapi

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StateProviderClient is the client API for StateProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateProviderClient interface {
	GetState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateT, error)
}

type stateProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewStateProviderClient(cc grpc.ClientConnInterface) StateProviderClient {
	return &stateProviderClient{cc}
}

func (c *stateProviderClient) GetState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateT, error) {
	out := new(StateT)
	err := c.cc.Invoke(ctx, "/grpcapi.StateProvider/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StateProviderServer is the server API for StateProvider service.
// All implementations must embed UnimplementedStateProviderServer
// for forward compatibility
type StateProviderServer interface {
	GetState(context.Context, *empty.Empty) (*StateT, error)
	mustEmbedUnimplementedStateProviderServer()
}

// UnimplementedStateProviderServer must be embedded to have forward compatible implementations.
type UnimplementedStateProviderServer struct {
}

func (UnimplementedStateProviderServer) GetState(context.Context, *empty.Empty) (*StateT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedStateProviderServer) mustEmbedUnimplementedStateProviderServer() {}

// UnsafeStateProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateProviderServer will
// result in compilation errors.
type UnsafeStateProviderServer interface {
	mustEmbedUnimplementedStateProviderServer()
}

func RegisterStateProviderServer(s grpc.ServiceRegistrar, srv StateProviderServer) {
	s.RegisterService(&StateProvider_ServiceDesc, srv)
}

func _StateProvider_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StateProviderServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.StateProvider/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StateProviderServer).GetState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StateProvider_ServiceDesc is the grpc.ServiceDesc for StateProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.StateProvider",
	HandlerType: (*StateProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _StateProvider_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcapi/grpcapi.proto",
}
